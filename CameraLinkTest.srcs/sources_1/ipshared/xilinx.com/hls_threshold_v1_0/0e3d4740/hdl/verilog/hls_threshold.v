// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.4
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="hls_threshold,hls_ip_2014_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=1.998000,HLS_SYN_LAT=0,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=5,HLS_SYN_LUT=68}" *)

module hls_threshold (
        sof_i,
        src_V_V_TDATA,
        dst_V_V_TDATA,
        sof_o,
        ap_clk,
        ap_rst_n,
        src_V_V_TVALID,
        src_V_V_TREADY,
        dst_V_V_TVALID,
        dst_V_V_TREADY,
        sof_o_ap_vld
);

parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_const_logic_1 = 1'b1;
parameter    ap_true = 1'b1;

input   sof_i;
input  [63:0] src_V_V_TDATA;
output  [7:0] dst_V_V_TDATA;
output   sof_o;
input   ap_clk;
input   ap_rst_n;
input   src_V_V_TVALID;
output   src_V_V_TREADY;
output   dst_V_V_TVALID;
input   dst_V_V_TREADY;
output   sof_o_ap_vld;

reg    ap_rst_n_inv;
wire    hls_threshold_Block_crit_edge_i_04_proc_U0_ap_start;
wire    hls_threshold_Block_crit_edge_i_04_proc_U0_ap_done;
wire    hls_threshold_Block_crit_edge_i_04_proc_U0_ap_continue;
wire    hls_threshold_Block_crit_edge_i_04_proc_U0_ap_idle;
wire    hls_threshold_Block_crit_edge_i_04_proc_U0_ap_ready;
wire   [63:0] hls_threshold_Block_crit_edge_i_04_proc_U0_src_V_V_TDATA;
wire    hls_threshold_Block_crit_edge_i_04_proc_U0_src_V_V_TVALID;
wire    hls_threshold_Block_crit_edge_i_04_proc_U0_src_V_V_TREADY;
wire   [7:0] hls_threshold_Block_crit_edge_i_04_proc_U0_dst_V_V_TDATA;
wire    hls_threshold_Block_crit_edge_i_04_proc_U0_dst_V_V_TVALID;
wire    hls_threshold_Block_crit_edge_i_04_proc_U0_dst_V_V_TREADY;
wire   [0:0] hls_threshold_Block_crit_edge_i_04_proc_U0_sof_i;
wire   [0:0] hls_threshold_Block_crit_edge_i_04_proc_U0_sof_o;
wire    hls_threshold_Block_crit_edge_i_04_proc_U0_sof_o_ap_vld;
wire    ap_sig_hs_continue;
reg    ap_CS;
reg    ap_sig_hs_done;


hls_threshold_Block_crit_edge_i_04_proc hls_threshold_Block_crit_edge_i_04_proc_U0(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst_n_inv ),
    .ap_start( hls_threshold_Block_crit_edge_i_04_proc_U0_ap_start ),
    .ap_done( hls_threshold_Block_crit_edge_i_04_proc_U0_ap_done ),
    .ap_continue( hls_threshold_Block_crit_edge_i_04_proc_U0_ap_continue ),
    .ap_idle( hls_threshold_Block_crit_edge_i_04_proc_U0_ap_idle ),
    .ap_ready( hls_threshold_Block_crit_edge_i_04_proc_U0_ap_ready ),
    .src_V_V_TDATA( hls_threshold_Block_crit_edge_i_04_proc_U0_src_V_V_TDATA ),
    .src_V_V_TVALID( hls_threshold_Block_crit_edge_i_04_proc_U0_src_V_V_TVALID ),
    .src_V_V_TREADY( hls_threshold_Block_crit_edge_i_04_proc_U0_src_V_V_TREADY ),
    .dst_V_V_TDATA( hls_threshold_Block_crit_edge_i_04_proc_U0_dst_V_V_TDATA ),
    .dst_V_V_TVALID( hls_threshold_Block_crit_edge_i_04_proc_U0_dst_V_V_TVALID ),
    .dst_V_V_TREADY( hls_threshold_Block_crit_edge_i_04_proc_U0_dst_V_V_TREADY ),
    .sof_i( hls_threshold_Block_crit_edge_i_04_proc_U0_sof_i ),
    .sof_o( hls_threshold_Block_crit_edge_i_04_proc_U0_sof_o ),
    .sof_o_ap_vld( hls_threshold_Block_crit_edge_i_04_proc_U0_sof_o_ap_vld )
);



/// assign process. ///
always @(posedge ap_clk)
begin
    ap_CS <= ap_const_logic_0;
end

/// ap_sig_hs_done assign process. ///
always @ (hls_threshold_Block_crit_edge_i_04_proc_U0_ap_done)
begin
    if ((hls_threshold_Block_crit_edge_i_04_proc_U0_ap_done == ap_const_logic_1)) begin
        ap_sig_hs_done = ap_const_logic_1;
    end else begin
        ap_sig_hs_done = ap_const_logic_0;
    end
end

/// ap_rst_n_inv assign process. ///
always @ (ap_rst_n)
begin
    ap_rst_n_inv = ~ap_rst_n;
end
assign ap_sig_hs_continue = ap_const_logic_0;
assign dst_V_V_TDATA = hls_threshold_Block_crit_edge_i_04_proc_U0_dst_V_V_TDATA;
assign dst_V_V_TVALID = hls_threshold_Block_crit_edge_i_04_proc_U0_dst_V_V_TVALID;
assign hls_threshold_Block_crit_edge_i_04_proc_U0_ap_continue = ap_const_logic_1;
assign hls_threshold_Block_crit_edge_i_04_proc_U0_ap_start = ap_const_logic_1;
assign hls_threshold_Block_crit_edge_i_04_proc_U0_dst_V_V_TREADY = dst_V_V_TREADY;
assign hls_threshold_Block_crit_edge_i_04_proc_U0_sof_i = sof_i;
assign hls_threshold_Block_crit_edge_i_04_proc_U0_src_V_V_TDATA = src_V_V_TDATA;
assign hls_threshold_Block_crit_edge_i_04_proc_U0_src_V_V_TVALID = src_V_V_TVALID;
assign sof_o = hls_threshold_Block_crit_edge_i_04_proc_U0_sof_o;
assign sof_o_ap_vld = hls_threshold_Block_crit_edge_i_04_proc_U0_sof_o_ap_vld;
assign src_V_V_TREADY = hls_threshold_Block_crit_edge_i_04_proc_U0_src_V_V_TREADY;


endmodule //hls_threshold

